#+TITLE: Configuração do Emacs
#+AUTHOR: Bira Neves
#+DATE: <2023-12-18 Mon>
#+DESCRIPTION: Configuração básica do Emacs para uso diário.
#+STARTUP: showall hidestars
#+OPTIONS: toc:2

* SUMÁRIO :toc:
- [[#pacotes-iniciais-importante][PACOTES INICIAIS IMPORTANTE]]
- [[#ace-window][ACE WINDOW]]
- [[#auto-complete][AUTO COMPLETE]]
- [[#dashboard][DASHBOARD]]
- [[#doom-themes][DOOM THEMES]]
- [[#elfeed][ELFEED]]
  - [[#elfeed-feeds][Elfeed Feeds]]
  - [[#elfeed-goodies][Elfeed Goodies]]
- [[#relative-line-numbers][RELATIVE LINE NUMBERS]]
- [[#magit][MAGIT]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#expansão-de-tags-de-blocos-de-código][Expansão de tags de blocos de código]]
  - [[#habilita-o-sumário][Habilita o sumário]]
  - [[#bullets-em-unicode-para-as-listas-e-cabeçalhos][Bullets em Unicode para as listas e cabeçalhos]]
  - [[#configurações-gerais][Configurações gerais]]
  - [[#configurações-úteis][Configurações úteis]]
  - [[#org-roam][Org Roam]]
- [[#page-break-lines][PAGE BREAK LINES]]
- [[#projectile][PROJECTILE]]
- [[#reconfiguração-de-alguns-padrões][RECONFIGURAÇÃO DE ALGUNS PADRÕES]]
- [[#restclient][RESTCLIENT]]
- [[#revealjs][REVEAL.JS]]
- [[#swiper][SWIPER]]
- [[#which-key][WHICH-KEY]]

* PACOTES INICIAIS IMPORTANTE
Estes pacotes devem ser carregados antes, já que são a base da configuração do sistema.

#+begin_src elisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src


* ACE WINDOW
Facilita a navegação entre janelas colocando um identificador.

#+begin_src elisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
      '(aw-leading-char-face
	((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+end_src


* AUTO COMPLETE
Mecanismo para autocompletar palavras durante a digitação.

#+begin_src elisp
  (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)))
#+end_src

* DASHBOARD

#+begin_src elisp
  (use-package dashboard
    :ensure t)
  (use-package all-the-icons
    :ensure t)

    (setq dashboard-startup-banner "~/.emacs.d/images/gnu-emacs-biraneves.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
			    (bookmarks . 5)
			    (projects . 10)
			    (agenda . 5)))

    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")
				      (projects . "file-directory")
				      (agenda . "calendar")))

    (global-set-key (kbd "C-c d o") 'dashboard-open)

    (dashboard-setup-startup-hook)
#+end_src

* DOOM THEMES
Permite o uso de temas pré-configurados do Doom Emacs.

#+begin_src elisp
  (use-package doom-themes
    :ensure t)

  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)

  (load-theme 'doom-gruvbox t)

  (doom-themes-visual-bell-config)
#+end_src

* ELFEED

#+begin_src elisp
  (setq elfeed-db-directory "~/Documentos/org/elfeed/elfeeddb")
  (use-package elfeed
    :ensure t
    :bind (:map elfeed-search-mode-map
                ("q" . bjm/elfeed-save-db-and-bury)
                ("Q" . bjm/elfeed-save-db-and-bury)
                ("m" . elfeed-toggle-star)
                ("M" . elfeed-toggle-star)))
#+end_src

** Elfeed Feeds

#+begin_src elisp
      (setq elfeed-feeds '(("https://warandpeas.com/feed/rss" comics)
                           ("https://theoatmeal.com/feed/rss" comics)
                           ("https://www.smbc-comics.com/comic/rss" comics)
                           ("https://what-if.xkcd.com/feed.atom" comics)
                           ("https://xkcd.com/atom.xml" comics)
                           ("https://geekmom.com/feed/" emacs)
                           ("http://pragmaticemacs.com/feed/" emacs)
                           ("https://cestlaz.github.io/rss.xml" cs)
                           ("https://biraneves.github.io/pdud/rss.xml" cs bioinformatica)))
#+end_src

** Elfeed Goodies

#+begin_src elisp
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))
#+end_src

* RELATIVE LINE NUMBERS

#+begin_src elisp
  (use-package linum-relative
    :ensure t)
#+end_src

#+RESULTS:

* MAGIT

#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src

#+RESULTS:

* NEOTREE

#+begin_src elisp
  (use-package neotree
    :ensure t)

  (global-set-key [f8] 'neotree-toggle)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

#+RESULTS:
: icons

* ORG MODE

** Expansão de tags de blocos de código

#+begin_src elisp
(require 'org-tempo)
#+end_src

** Habilita o sumário

#+begin_src elisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Bullets em Unicode para as listas e cabeçalhos
Aqui, usamos o pacote =org-superstars=, o sucessor natural do =org-bullets=, que foi descontinuado.

#+begin_src elisp
  (use-package org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

** Configurações gerais

#+begin_src elisp
  (custom-set-variables
   '(org-directory "~/Documentos/org/")
   '(org-default-notes-file (concat org-directory "notes.org"))
   '(org-startup-indented t))

  (setq org-tags-column -80)

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-agenda-files (list "~/Documentos/org/gcal.org"
                               "~/Documentos/org/i.org"
                               "~/Documentos/org/schedule.org"))

  (setq org-capture-templates
        '(("a" "Appointment" entry (file+headline "~/Documentos/org/gcal.org" "Appointments")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nSCHEDULED: %^T \n %i\n")

          ("n" "Note" entry (file+headline "~/Documentos/org/notes.org" "Notes")
           "* Note %?\n%T")

          ("l" "Link" entry (file+headline "~/Documentos/org/links.org" "Links")
           "* [[%^{URL}][%^{Title}]] :%^{Tags}:\n%T" :prepend t)

          ("b" "Blog idea" entry (file+headline "~/Documentos/org/i.org" "Blog Topics")
           "* %?\n%T" :prepend t)

          ("t" "To do item" entry (file+headline "~/Documentos/org/i.org" "To Do Items")
           "* %?\n%T" :prepend t)

          ("j" "Journal" entry (file+datetree "~/Documentos/org/journal.org")
           "* %?\nRegistrado em %U\n  %i\n  %a")))
#+end_src


** Configurações úteis

#+begin_src elisp
  (setq org-return-follows-link t)
  (setq org-hide-emphasis-markers t)

  (global-set-key (kbd "\e\ei")
                  (lambda () (interactive) (find-file "~/Documentos/org/i.org")))
  (global-set-key (kbd "\e\el")
                  (lambda () (interactive) (find-file "~/Documentos/org/links.org")))
  (global-set-key (kbd "\e\ec")
                  (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
#+end_src


** Org Roam

#+begin_src elisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "/home/biraneves/Documentos/org/roam/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ("C-c n j" . org-roam-capture-today))
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src

* PAGE BREAK LINES
Este pacote é necessário (opcional) para uma melhor apresentação do /dashboard/.

#+begin_src elisp
  (use-package page-break-lines
    :ensure t)
#+end_src


* PROJECTILE
Facilita o manejo de arquivos ligados a um projeto.

#+begin_src elisp
  (use-package projectile
    :ensure t)

  (setq projectile-project-search-path '("~/Git/"))
#+end_src

* RECONFIGURAÇÃO DE ALGUNS PADRÕES
Ajustando alguns padrões do Emacs para melhorar a usabilidade.

#+begin_src elisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+end_src

#+RESULTS:
: relative

* RESTCLIENT

#+begin_src elisp
  (use-package restclient
    :ensure t)

  (use-package ob-restclient
    :ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)))
#+end_src

#+RESULTS:

* REVEAL.JS

#+begin_src elisp
  (use-package ox-reveal
    :ensure ox-reveal)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+end_src


* SWIPER
Um mecanismo de busca melhor que o padrão.

#+begin_src elisp
    (use-package counsel
      :ensure t
      :after ivy
      :diminish
      :config
      (counsel-mode)
      (setq ivy-initial-inputs-alist nil))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+end_src


* WHICH-KEY
Exibe a função das teclas que compõem um comando.

#+begin_src elisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1))
#+end_src
